# Don't Remove Credit @VJ_Botz
# Subscribe YouTube Channel For Amazing Bot @Tech_VJ
# Ask Doubt on telegram @KingVJ01

import asyncio
import datetime
from pyrogram import Client, filters
from pyrogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from database.users_chats_db import db
from info import ADMINS
from utils import get_seconds

# Premium User Management Commands for Admins

@Client.on_message(filters.command("premium_users") & filters.user(ADMINS))
async def premium_users_list(client, message):
    """Show list of all premium users"""
    try:
        premium_users = await db.get_all_premium_users()
        
        if not premium_users:
            await message.reply("ЁЯУн **ржХрзЛржи ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░ ржирзЗржЗред**")
            return
        
        text = "ЁЯСС **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░ржжрзЗрж░ рждрж╛рж▓рж┐ржХрж╛:**\n\n"
        
        for i, user in enumerate(premium_users[:20], 1):  # Show first 20 users
            user_id = user['user_id']
            expiry = user['expiry_time']
            remaining = expiry - datetime.datetime.now()
            days_left = remaining.days
            
            # Get user info from Telegram
            try:
                user_info = await client.get_users(user_id)
                name = user_info.first_name
                username = f"@{user_info.username}" if user_info.username else "No Username"
            except:
                name = "Unknown"
                username = "N/A"
            
            text += f"**{i}.** `{user_id}` - **{name}**\n"
            text += f"   тФФ Username: {username}\n"
            text += f"   тФФ ржорзЗржпрж╝рж╛ржж: **{days_left} ржжрж┐ржи** ржмрж╛ржХрж┐\n"
            text += f"   тФФ рж╢рзЗрж╖ рж╣ржмрзЗ: `{expiry.strftime('%d/%m/%Y %H:%M')}`\n\n"
        
        if len(premium_users) > 20:
            text += f"**... ржЖрж░ржУ {len(premium_users) - 20}ржЯрж┐ ржЗржЙржЬрж╛рж░ ржЖржЫрзЗ**\n\n"
        
        # Add navigation buttons
        buttons = [
            [InlineKeyboardButton("ЁЯУК ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи", callback_data="premium_stats")],
            [InlineKeyboardButton("ЁЯФН ржЦрзБржБржЬрзБржи", callback_data="premium_search"),
             InlineKeyboardButton("тЮХ ржпрзЛржЧ ржХрж░рзБржи", callback_data="add_premium")],
            [InlineKeyboardButton("тЭМ ржмржирзНржз ржХрж░рзБржи", callback_data="close_data")]
        ]
        
        await message.reply(text, reply_markup=InlineKeyboardMarkup(buttons))
        
    except Exception as e:
        await message.reply(f"тЭМ **ржПрж░рж░:** `{str(e)}`")

@Client.on_message(filters.command("premium_stats") & filters.user(ADMINS))
async def premium_statistics(client, message):
    """Show premium user statistics"""
    try:
        stats = await db.get_premium_stats()
        
        text = f"""ЁЯУК **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи:**

ЁЯСС **рж╕ржХрзНрж░рж┐ржпрж╝ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо:** `{stats['total_premium']}` ржЬржи
тП░ **ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖:** `{stats['expired_premium']}` ржЬржи  
ЁЯЖУ **ржлрзНрж░рж┐ ржЯрзНрж░рж╛ржпрж╝рж╛рж▓:** `{stats['free_trial_users']}` ржЬржи
тЪая╕П **рзн ржжрж┐ржирзЗ рж╢рзЗрж╖:** `{stats['expiring_soon']}` ржЬржи

ЁЯУИ **ржорзЛржЯ ржЗржЙржЬрж╛рж░:** `{stats['total_premium'] + stats['expired_premium']}` ржЬржи"""

        buttons = [
            [InlineKeyboardButton("ЁЯСС ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рждрж╛рж▓рж┐ржХрж╛", callback_data="premium_list")],
            [InlineKeyboardButton("тЪая╕П рж╢рзАржШрзНрж░ржЗ рж╢рзЗрж╖", callback_data="expiring_users")],
            [InlineKeyboardButton("тЭМ ржмржирзНржз ржХрж░рзБржи", callback_data="close_data")]
        ]
        
        await message.reply(text, reply_markup=InlineKeyboardMarkup(buttons))
        
    except Exception as e:
        await message.reply(f"тЭМ **ржПрж░рж░:** `{str(e)}`")

@Client.on_message(filters.command("add_premium") & filters.user(ADMINS))
async def add_premium_user(client, message):
    """Add premium access to a user"""
    try:
        if len(message.command) < 3:
            await message.reply(
                "ЁЯУЭ **ржмрзНржпржмрж╣рж╛рж░:**\n"
                "`/add_premium <user_id> <days>`\n\n"
                "**ржЙржжрж╛рж╣рж░ржг:**\n"
                "`/add_premium 123456789 30`"
            )
            return
        
        user_id = int(message.command[1])
        days = int(message.command[2])
        
        if days <= 0:
            await message.reply("тЭМ **ржжрж┐ржирзЗрж░ рж╕ржВржЦрзНржпрж╛ рзж ржПрж░ ржЪрзЗржпрж╝рзЗ ржмрзЗрж╢рж┐ рж╣рждрзЗ рж╣ржмрзЗред**")
            return
        
        # Add premium access
        expiry_time = await db.add_premium_user(user_id, days)
        
        # Get user info
        try:
            user_info = await client.get_users(user_id)
            name = user_info.first_name
            username = f"@{user_info.username}" if user_info.username else "No Username"
        except:
            name = "Unknown User"
            username = "N/A"
        
        text = f"""тЬЕ **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржпрзЛржЧ ржХрж░рж╛ рж╣ржпрж╝рзЗржЫрзЗ!**

ЁЯСд **ржЗржЙржЬрж╛рж░:** `{user_id}` - **{name}**
ЁЯУ▒ **Username:** {username}
тП░ **ржорзЗржпрж╝рж╛ржж:** **{days} ржжрж┐ржи**
ЁЯУЕ **рж╢рзЗрж╖ рж╣ржмрзЗ:** `{expiry_time.strftime('%d/%m/%Y %H:%M')}`

ЁЯОЙ **ржЗржЙржЬрж╛рж░ржЯрж┐ ржПржЦржи ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рж╕рзБржмрж┐ржзрж╛ ржкрж╛ржмрзЗ!**"""
        
        await message.reply(text)
        
        # Notify the user
        try:
            await client.send_message(
                user_id,
                f"ЁЯОЙ **ржЕржнрж┐ржиржирзНржжржи!**\n\n"
                f"ржЖржкржирж╛ржХрзЗ **{days} ржжрж┐ржирзЗрж░** ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗ!\n"
                f"ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖: `{expiry_time.strftime('%d/%m/%Y %H:%M')}`\n\n"
                f"ЁЯТО **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рж╕рзБржмрж┐ржзрж╛:**\n"
                f"тАв ржЖржирж▓рж┐ржорж┐ржЯрзЗржб ржбрж╛ржЙржирж▓рзЛржб\n"
                f"тАв ржжрзНрж░рзБржд рж╕рзНржкрж┐ржб\n"
                f"тАв ржмрж┐ржЬрзНржЮрж╛ржкржи ржорзБржХрзНржд\n"
                f"тАв ржкрзНрж░рж╛ржЗржУрж░рж┐ржЯрж┐ рж╕рж╛ржкрзЛрж░рзНржЯ"
            )
        except:
            pass
        
    except ValueError:
        await message.reply("тЭМ **ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯред рж╕ржВржЦрзНржпрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред**")
    except Exception as e:
        await message.reply(f"тЭМ **ржПрж░рж░:** `{str(e)}`")

@Client.on_message(filters.command("remove_premium") & filters.user(ADMINS))
async def remove_premium_user(client, message):
    """Remove premium access from a user"""
    try:
        if len(message.command) < 2:
            await message.reply(
                "ЁЯУЭ **ржмрзНржпржмрж╣рж╛рж░:**\n"
                "`/remove_premium <user_id>`\n\n"
                "**ржЙржжрж╛рж╣рж░ржг:**\n"
                "`/remove_premium 123456789`"
            )
            return
        
        user_id = int(message.command[1])
        
        # Check if user has premium
        if not await db.has_premium_access(user_id):
            await message.reply("тЭМ **ржПржЗ ржЗржЙржЬрж╛рж░рзЗрж░ ржХрзЛржи ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржирзЗржЗред**")
            return
        
        # Remove premium access
        await db.remove_premium_user(user_id)
        
        # Get user info
        try:
            user_info = await client.get_users(user_id)
            name = user_info.first_name
            username = f"@{user_info.username}" if user_info.username else "No Username"
        except:
            name = "Unknown User"
            username = "N/A"
        
        text = f"""тЬЕ **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ рж╕рж░рж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!**

ЁЯСд **ржЗржЙржЬрж╛рж░:** `{user_id}` - **{name}**
ЁЯУ▒ **Username:** {username}

тЪая╕П **ржЗржЙржЬрж╛рж░ржЯрж┐ ржПржЦржи ржлрзНрж░рж┐ ржЗржЙржЬрж╛рж░ рж╣ржпрж╝рзЗ ржЧрзЗржЫрзЗред**"""
        
        await message.reply(text)
        
        # Notify the user
        try:
            await client.send_message(
                user_id,
                "тЪая╕П **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖**\n\n"
                "ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ рж╕рж░рж┐ржпрж╝рзЗ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗред\n"
                "ржПржЦржи ржЖржкржирж┐ ржлрзНрж░рж┐ ржЗржЙржЬрж╛рж░ рж╣рж┐рж╕рзЗржмрзЗ рж╕рзАржорж┐ржд рж╕рзБржмрж┐ржзрж╛ ржкрж╛ржмрзЗржиред\n\n"
                "ржирждрзБржи ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржкрзНрж▓рзНржпрж╛ржирзЗрж░ ржЬржирзНржп /plan ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"
            )
        except:
            pass
        
    except ValueError:
        await message.reply("тЭМ **ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯред рж╕ржВржЦрзНржпрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред**")
    except Exception as e:
        await message.reply(f"тЭМ **ржПрж░рж░:** `{str(e)}`")

@Client.on_message(filters.command("extend_premium") & filters.user(ADMINS))
async def extend_premium_user(client, message):
    """Extend premium access for a user"""
    try:
        if len(message.command) < 3:
            await message.reply(
                "ЁЯУЭ **ржмрзНржпржмрж╣рж╛рж░:**\n"
                "`/extend_premium <user_id> <additional_days>`\n\n"
                "**ржЙржжрж╛рж╣рж░ржг:**\n"
                "`/extend_premium 123456789 15`"
            )
            return
        
        user_id = int(message.command[1])
        additional_days = int(message.command[2])
        
        if additional_days <= 0:
            await message.reply("тЭМ **ржжрж┐ржирзЗрж░ рж╕ржВржЦрзНржпрж╛ рзж ржПрж░ ржЪрзЗржпрж╝рзЗ ржмрзЗрж╢рж┐ рж╣рждрзЗ рж╣ржмрзЗред**")
            return
        
        # Extend premium access
        new_expiry = await db.extend_premium_user(user_id, additional_days)
        
        if not new_expiry:
            await message.reply("тЭМ **ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред**")
            return
        
        # Get user info
        try:
            user_info = await client.get_users(user_id)
            name = user_info.first_name
            username = f"@{user_info.username}" if user_info.username else "No Username"
        except:
            name = "Unknown User"
            username = "N/A"
        
        text = f"""тЬЕ **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржорзЗржпрж╝рж╛ржж ржмрж╛ржбрж╝рж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!**

ЁЯСд **ржЗржЙржЬрж╛рж░:** `{user_id}` - **{name}**
ЁЯУ▒ **Username:** {username}
тЮХ **ржЕрждрж┐рж░рж┐ржХрзНржд:** **{additional_days} ржжрж┐ржи**
ЁЯУЕ **ржирждрзБржи ржорзЗржпрж╝рж╛ржж:** `{new_expiry.strftime('%d/%m/%Y %H:%M')}`

ЁЯОЙ **ржЗржЙржЬрж╛рж░рзЗрж░ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржорзЗржпрж╝рж╛ржж ржмрзГржжрзНржзрж┐ ржкрзЗржпрж╝рзЗржЫрзЗ!**"""
        
        await message.reply(text)
        
        # Notify the user
        try:
            await client.send_message(
                user_id,
                f"ЁЯОЙ **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржорзЗржпрж╝рж╛ржж ржмрзГржжрзНржзрж┐!**\n\n"
                f"ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржорзЗржпрж╝рж╛ржж **{additional_days} ржжрж┐ржи** ржмрж╛ржбрж╝рж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!\n"
                f"ржирждрзБржи ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖: `{new_expiry.strftime('%d/%m/%Y %H:%M')}`\n\n"
                f"ЁЯТО **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рж╕рзБржмрж┐ржзрж╛ ржЪрж╛рж▓рзБ ржерж╛ржХржмрзЗ!**"
            )
        except:
            pass
        
    except ValueError:
        await message.reply("тЭМ **ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯред рж╕ржВржЦрзНржпрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред**")
    except Exception as e:
        await message.reply(f"тЭМ **ржПрж░рж░:** `{str(e)}`")

@Client.on_message(filters.command("premium_info") & filters.user(ADMINS))
async def premium_user_info(client, message):
    """Get detailed info about a premium user"""
    try:
        if len(message.command) < 2:
            await message.reply(
                "ЁЯУЭ **ржмрзНржпржмрж╣рж╛рж░:**\n"
                "`/premium_info <user_id>`\n\n"
                "**ржЙржжрж╛рж╣рж░ржг:**\n"
                "`/premium_info 123456789`"
            )
            return
        
        user_id = int(message.command[1])
        
        # Get premium user details
        details = await db.get_premium_user_details(user_id)
        
        if not details:
            await message.reply("тЭМ **ржПржЗ ржЗржЙржЬрж╛рж░рзЗрж░ ржХрзЛржи ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржирзЗржЗред**")
            return
        
        # Get user info from Telegram
        try:
            user_info = await client.get_users(user_id)
            name = user_info.first_name
            username = f"@{user_info.username}" if user_info.username else "No Username"
        except:
            name = "Unknown User"
            username = "N/A"
        
        remaining = details['remaining_time']
        days_left = remaining.days
        hours_left = remaining.seconds // 3600
        
        text = f"""ЁЯСд **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░рзЗрж░ рждржерзНржп:**

**ЁЯУЛ ржмрзНржпржХрзНрждрж┐ржЧржд рждржерзНржп:**
тАв **ржирж╛ржо:** {name}
тАв **ржЗржЙржЬрж╛рж░ ID:** `{user_id}`
тАв **Username:** {username}

**ЁЯТО ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рждржерзНржп:**
тАв **ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖:** `{details['expiry_time'].strftime('%d/%m/%Y %H:%M')}`
тАв **ржмрж╛ржХрж┐ рж╕ржоржпрж╝:** **{days_left} ржжрж┐ржи {hours_left} ржШржирзНржЯрж╛**
тАв **ржлрзНрж░рж┐ ржЯрзНрж░рж╛ржпрж╝рж╛рж▓:** {'тЬЕ рж╣рзНржпрж╛ржБ' if details['has_free_trial'] else 'тЭМ ржирж╛'}

**ЁЯУК ржмрзНржпржмрж╣рж╛рж░рзЗрж░ рждржерзНржп:**
тАв **ржЖржЬржХрзЗрж░ рж░рж┐ржХрзБржпрж╝рзЗрж╕рзНржЯ:** `{details['daily_requests']}`
тАв **ржорзЛржЯ рж░рж┐ржХрзБржпрж╝рзЗрж╕рзНржЯ:** `{details['total_requests']}`
тАв **ржжрзИржирж┐ржХ рж╕рзАржорж╛:** `{details['max_daily_requests']}`"""

        buttons = [
            [InlineKeyboardButton("тЮХ ржорзЗржпрж╝рж╛ржж ржмрж╛ржбрж╝рж╛ржи", callback_data=f"extend_user_{user_id}"),
             InlineKeyboardButton("тЭМ рж╕рж░рж╛ржи", callback_data=f"remove_user_{user_id}")],
            [InlineKeyboardButton("ЁЯФД рж░рж┐ржлрзНрж░рзЗрж╢", callback_data=f"refresh_info_{user_id}"),
             InlineKeyboardButton("тЭМ ржмржирзНржз", callback_data="close_data")]
        ]
        
        await message.reply(text, reply_markup=InlineKeyboardMarkup(buttons))
        
    except ValueError:
        await message.reply("тЭМ **ржнрзБрж▓ ржлрж░ржорзНржпрж╛ржЯред рж╕ржВржЦрзНржпрж╛ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред**")
    except Exception as e:
        await message.reply(f"тЭМ **ржПрж░рж░:** `{str(e)}`")

# Callback Query Handlers
@Client.on_callback_query(filters.regex("premium_"))
async def premium_callback_handler(client, query: CallbackQuery):
    """Handle premium management callbacks"""
    if query.from_user.id not in ADMINS:
        await query.answer("тЭМ ржЖржкржирж╛рж░ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЕржирзБржорждрж┐ ржирзЗржЗ!", show_alert=True)
        return
    
    data = query.data
    
    if data == "premium_stats":
        try:
            stats = await db.get_premium_stats()
            
            text = f"""ЁЯУК **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░ ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи:**

ЁЯСС **рж╕ржХрзНрж░рж┐ржпрж╝ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо:** `{stats['total_premium']}` ржЬржи
тП░ **ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖:** `{stats['expired_premium']}` ржЬржи  
ЁЯЖУ **ржлрзНрж░рж┐ ржЯрзНрж░рж╛ржпрж╝рж╛рж▓:** `{stats['free_trial_users']}` ржЬржи
тЪая╕П **рзн ржжрж┐ржирзЗ рж╢рзЗрж╖:** `{stats['expiring_soon']}` ржЬржи

ЁЯУИ **ржорзЛржЯ ржЗржЙржЬрж╛рж░:** `{stats['total_premium'] + stats['expired_premium']}` ржЬржи"""

            buttons = [
                [InlineKeyboardButton("ЁЯСС ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рждрж╛рж▓рж┐ржХрж╛", callback_data="premium_list")],
                [InlineKeyboardButton("тЪая╕П рж╢рзАржШрзНрж░ржЗ рж╢рзЗрж╖", callback_data="expiring_users")],
                [InlineKeyboardButton("ЁЯФЩ ржлрж┐рж░рзЗ ржпрж╛ржи", callback_data="premium_main"),
                 InlineKeyboardButton("тЭМ ржмржирзНржз", callback_data="close_data")]
            ]
            
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))
            
        except Exception as e:
            await query.answer(f"тЭМ ржПрж░рж░: {str(e)}", show_alert=True)
    
    elif data == "premium_list":
        try:
            premium_users = await db.get_all_premium_users()
            
            if not premium_users:
                await query.answer("ЁЯУн ржХрзЛржи ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░ ржирзЗржЗред", show_alert=True)
                return
            
            text = "ЁЯСС **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░ржжрзЗрж░ рждрж╛рж▓рж┐ржХрж╛:**\n\n"
            
            for i, user in enumerate(premium_users[:10], 1):  # Show first 10 users
                user_id = user['user_id']
                expiry = user['expiry_time']
                remaining = expiry - datetime.datetime.now()
                days_left = remaining.days
                
                try:
                    user_info = await client.get_users(user_id)
                    name = user_info.first_name[:15] + "..." if len(user_info.first_name) > 15 else user_info.first_name
                except:
                    name = "Unknown"
                
                text += f"**{i}.** `{user_id}` - **{name}**\n"
                text += f"   тФФ **{days_left} ржжрж┐ржи** ржмрж╛ржХрж┐\n\n"
            
            if len(premium_users) > 10:
                text += f"**... ржЖрж░ржУ {len(premium_users) - 10}ржЯрж┐ ржЗржЙржЬрж╛рж░**\n\n"
            
            buttons = [
                [InlineKeyboardButton("ЁЯУК ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи", callback_data="premium_stats")],
                [InlineKeyboardButton("ЁЯФЩ ржлрж┐рж░рзЗ ржпрж╛ржи", callback_data="premium_main"),
                 InlineKeyboardButton("тЭМ ржмржирзНржз", callback_data="close_data")]
            ]
            
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))
            
        except Exception as e:
            await query.answer(f"тЭМ ржПрж░рж░: {str(e)}", show_alert=True)
    
    elif data == "expiring_users":
        try:
            # Get users expiring in next 7 days
            next_week = datetime.datetime.now() + datetime.timedelta(days=7)
            expiring_users = await db.search_premium_users(status="active")
            
            # Filter users expiring in next 7 days
            expiring_soon = []
            for user_data in expiring_users:
                expiry = user_data.get('expiry_time')
                if expiry and expiry < next_week:
                    expiring_soon.append(user_data)
            
            if not expiring_soon:
                await query.answer("тЬЕ ржХрзЛржи ржЗржЙржЬрж╛рж░рзЗрж░ ржорзЗржпрж╝рж╛ржж рж╢рзАржШрзНрж░ржЗ рж╢рзЗрж╖ рж╣ржЪрзНржЫрзЗ ржирж╛ред", show_alert=True)
                return
            
            text = "тЪая╕П **рж╢рзАржШрзНрж░ржЗ ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖ рж╣ржмрзЗ:**\n\n"
            
            for i, user_data in enumerate(expiring_soon[:10], 1):
                user_id = user_data['id']
                expiry = user_data['expiry_time']
                remaining = expiry - datetime.datetime.now()
                days_left = remaining.days
                
                try:
                    user_info = await client.get_users(user_id)
                    name = user_info.first_name[:15] + "..." if len(user_info.first_name) > 15 else user_info.first_name
                except:
                    name = "Unknown"
                
                text += f"**{i}.** `{user_id}` - **{name}**\n"
                text += f"   тФФ **{days_left} ржжрж┐ржи** ржмрж╛ржХрж┐\n\n"
            
            buttons = [
                [InlineKeyboardButton("ЁЯУК ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи", callback_data="premium_stats")],
                [InlineKeyboardButton("ЁЯФЩ ржлрж┐рж░рзЗ ржпрж╛ржи", callback_data="premium_main"),
                 InlineKeyboardButton("тЭМ ржмржирзНржз", callback_data="close_data")]
            ]
            
            await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))
            
        except Exception as e:
            await query.answer(f"тЭМ ржПрж░рж░: {str(e)}", show_alert=True)

@Client.on_message(filters.command("search_premium") & filters.user(ADMINS))
async def search_premium_users(client, message):
    """Search premium users by user ID or username"""
    try:
        if len(message.command) < 2:
            await message.reply(
                "ЁЯФН **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзБржи:**\n\n"
                "ЁЯУЭ **ржмрзНржпржмрж╣рж╛рж░:**\n"
                "`/search_premium <user_id/username>`\n\n"
                "**ржЙржжрж╛рж╣рж░ржг:**\n"
                "`/search_premium 123456789`\n"
                "`/search_premium @username`"
            )
            return
        
        search_term = message.command[1]
        
        # Remove @ if present in username
        if search_term.startswith('@'):
            search_term = search_term[1:]
        
        # Try to get user info first
        try:
            if search_term.isdigit():
                user_id = int(search_term)
                user_info = await client.get_users(user_id)
            else:
                user_info = await client.get_users(search_term)
                user_id = user_info.id
        except:
            await message.reply("тЭМ **ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзЗ ржкрж╛ржУржпрж╝рж╛ ржпрж╛ржпрж╝ржирж┐ред**")
            return
        
        # Check if user has premium
        details = await db.get_premium_user_details(user_id)
        
        if not details:
            await message.reply(
                f"тЭМ **ржЗржЙржЬрж╛рж░ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ ржХрж┐ржирзНрждрзБ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржиржпрж╝:**\n\n"
                f"ЁЯСд **ржирж╛ржо:** {user_info.first_name}\n"
                f"ЁЯУ▒ **Username:** @{user_info.username if user_info.username else 'N/A'}\n"
                f"ЁЯЖФ **ID:** `{user_id}`\n\n"
                f"ЁЯТб **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржжрж┐рждрзЗ:** `/add_premium {user_id} <days>`"
            )
            return
        
        # Show premium user details
        name = user_info.first_name
        username = f"@{user_info.username}" if user_info.username else "No Username"
        
        remaining = details['remaining_time']
        days_left = remaining.days
        hours_left = remaining.seconds // 3600
        
        text = f"""тЬЕ **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░ ржкрж╛ржУржпрж╝рж╛ ржЧрзЗржЫрзЗ:**

**ЁЯУЛ ржмрзНржпржХрзНрждрж┐ржЧржд рждржерзНржп:**
тАв **ржирж╛ржо:** {name}
тАв **ржЗржЙржЬрж╛рж░ ID:** `{user_id}`
тАв **Username:** {username}

**ЁЯТО ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рждржерзНржп:**
тАв **ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖:** `{details['expiry_time'].strftime('%d/%m/%Y %H:%M')}`
тАв **ржмрж╛ржХрж┐ рж╕ржоржпрж╝:** **{days_left} ржжрж┐ржи {hours_left} ржШржирзНржЯрж╛**
тАв **ржлрзНрж░рж┐ ржЯрзНрж░рж╛ржпрж╝рж╛рж▓:** {'тЬЕ рж╣рзНржпрж╛ржБ' if details['has_free_trial'] else 'тЭМ ржирж╛'}

**ЁЯУК ржмрзНржпржмрж╣рж╛рж░рзЗрж░ рждржерзНржп:**
тАв **ржЖржЬржХрзЗрж░ рж░рж┐ржХрзБржпрж╝рзЗрж╕рзНржЯ:** `{details['daily_requests']}`
тАв **ржорзЛржЯ рж░рж┐ржХрзБржпрж╝рзЗрж╕рзНржЯ:** `{details['total_requests']}`
тАв **ржжрзИржирж┐ржХ рж╕рзАржорж╛:** `{details['max_daily_requests']}`"""

        buttons = [
            [InlineKeyboardButton("тЮХ ржорзЗржпрж╝рж╛ржж ржмрж╛ржбрж╝рж╛ржи", callback_data=f"extend_user_{user_id}"),
             InlineKeyboardButton("тЭМ рж╕рж░рж╛ржи", callback_data=f"remove_user_{user_id}")],
            [InlineKeyboardButton("ЁЯУК ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи", callback_data="premium_stats"),
             InlineKeyboardButton("тЭМ ржмржирзНржз", callback_data="close_data")]
        ]
        
        await message.reply(text, reply_markup=InlineKeyboardMarkup(buttons))
        
    except Exception as e:
        await message.reply(f"тЭМ **ржПрж░рж░:** `{str(e)}`")

@Client.on_message(filters.command("filter_premium") & filters.user(ADMINS))
async def filter_premium_users(client, message):
    """Filter premium users by different criteria"""
    try:
        if len(message.command) < 2:
            await message.reply(
                "ЁЯФН **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░ ржлрж┐рж▓рзНржЯрж╛рж░:**\n\n"
                "ЁЯУЭ **ржмрзНржпржмрж╣рж╛рж░:**\n"
                "`/filter_premium <filter_type>`\n\n"
                "**ржлрж┐рж▓рзНржЯрж╛рж░ ржЕржкрж╢ржи:**\n"
                "тАв `active` - рж╕ржХрзНрж░рж┐ржпрж╝ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░\n"
                "тАв `expired` - ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖ ржЗржЙржЬрж╛рж░\n"
                "тАв `expiring` - рзн ржжрж┐ржирзЗ рж╢рзЗрж╖ рж╣ржмрзЗ\n"
                "тАв `trial` - ржлрзНрж░рж┐ ржЯрзНрж░рж╛ржпрж╝рж╛рж▓ ржЗржЙржЬрж╛рж░\n"
                "тАв `new` - ржирждрзБржи ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо (рзн ржжрж┐ржирзЗрж░ ржоржзрзНржпрзЗ)\n\n"
                "**ржЙржжрж╛рж╣рж░ржг:**\n"
                "`/filter_premium active`"
            )
            return
        
        filter_type = message.command[1].lower()
        
        if filter_type == "active":
            users = await db.search_premium_users(status="active")
            title = "ЁЯЯв **рж╕ржХрзНрж░рж┐ржпрж╝ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░**"
        elif filter_type == "expired":
            users = await db.search_premium_users(status="expired")
            title = "ЁЯФ┤ **ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░**"
        elif filter_type == "expiring":
            users = await db.search_premium_users(status="expiring")
            title = "тЪая╕П **рж╢рзАржШрзНрж░ржЗ ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖ (рзн ржжрж┐ржи)**"
        elif filter_type == "trial":
            users = await db.search_premium_users(has_trial=True)
            title = "ЁЯЖУ **ржлрзНрж░рж┐ ржЯрзНрж░рж╛ржпрж╝рж╛рж▓ ржЗржЙржЬрж╛рж░**"
        elif filter_type == "new":
            users = await db.search_premium_users(status="new")
            title = "ЁЯЖХ **ржирждрзБржи ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░ (рзн ржжрж┐ржи)**"
        else:
            await message.reply(
                "тЭМ **ржнрзБрж▓ ржлрж┐рж▓рзНржЯрж╛рж░ ржЯрж╛ржЗржкред**\n\n"
                "**рж╕ржарж┐ржХ ржЕржкрж╢ржи:** `active`, `expired`, `expiring`, `trial`, `new`"
            )
            return
        
        if not users:
            await message.reply(f"ЁЯУн **{title} ржПрж░ ржЕржзрзАржирзЗ ржХрзЛржи ржЗржЙржЬрж╛рж░ ржирзЗржЗред**")
            return
        
        text = f"{title}\n\n"
        
        for i, user_data in enumerate(users[:15], 1):  # Show first 15 users
            user_id = user_data.get('id') or user_data.get('user_id')
            
            try:
                user_info = await client.get_users(user_id)
                name = user_info.first_name[:12] + "..." if len(user_info.first_name) > 12 else user_info.first_name
                username = f"@{user_info.username}" if user_info.username else "N/A"
            except:
                name = "Unknown"
                username = "N/A"
            
            if filter_type in ["active", "expiring", "new"]:
                expiry = user_data.get('expiry_time')
                if expiry:
                    remaining = expiry - datetime.datetime.now()
                    days_left = remaining.days
                    text += f"**{i}.** `{user_id}` - **{name}**\n"
                    text += f"   тФФ Username: {username}\n"
                    text += f"   тФФ **{days_left} ржжрж┐ржи** ржмрж╛ржХрж┐\n\n"
                else:
                    text += f"**{i}.** `{user_id}` - **{name}**\n"
                    text += f"   тФФ Username: {username}\n\n"
            else:
                text += f"**{i}.** `{user_id}` - **{name}**\n"
                text += f"   тФФ Username: {username}\n\n"
        
        if len(users) > 15:
            text += f"**... ржЖрж░ржУ {len(users) - 15}ржЯрж┐ ржЗржЙржЬрж╛рж░ ржЖржЫрзЗ**\n\n"
        
        text += f"**ржорзЛржЯ:** `{len(users)}` ржЬржи"
        
        buttons = [
            [InlineKeyboardButton("ЁЯУК ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи", callback_data="premium_stats")],
            [InlineKeyboardButton("ЁЯСС рж╕ржм ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо", callback_data="premium_list"),
             InlineKeyboardButton("тЭМ ржмржирзНржз", callback_data="close_data")]
        ]
        
        await message.reply(text, reply_markup=InlineKeyboardMarkup(buttons))
        
    except Exception as e:
        await message.reply(f"тЭМ **ржПрж░рж░:** `{str(e)}`")

@Client.on_message(filters.command("premium_help") & filters.user(ADMINS))
async def premium_help(client, message):
    """Show help for premium management commands"""
    text = """ЁЯФз **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржорзНржпрж╛ржирзЗржЬржорзЗржирзНржЯ ржХржорж╛ржирзНржб:**

**ЁЯУЛ рждрж╛рж▓рж┐ржХрж╛ ржУ рждржерзНржп:**
тАв `/premium_users` - рж╕ржм ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░ ржжрзЗржЦрзБржи
тАв `/premium_stats` - ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи ржжрзЗржЦрзБржи
тАв `/premium_info <user_id>` - ржирж┐рж░рзНржжрж┐рж╖рзНржЯ ржЗржЙржЬрж╛рж░рзЗрж░ рждржерзНржп

**тЮХ ржпрзЛржЧ ржУ рж╕рж░рж╛ржирзЛ:**
тАв `/add_premium <user_id> <days>` - ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржжрж┐ржи
тАв `/remove_premium <user_id>` - ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рж╕рж░рж╛ржи
тАв `/extend_premium <user_id> <days>` - ржорзЗржпрж╝рж╛ржж ржмрж╛ржбрж╝рж╛ржи

**ЁЯФН ржЦрзЛржБржЬрж╛ ржУ ржлрж┐рж▓рзНржЯрж╛рж░:**
тАв `/search_premium <user_id/username>` - ржЗржЙржЬрж╛рж░ ржЦрзБржБржЬрзБржи
тАв `/filter_premium <type>` - ржлрж┐рж▓рзНржЯрж╛рж░ ржХрж░рзБржи

**ржлрж┐рж▓рзНржЯрж╛рж░ ржЕржкрж╢ржи:**
тАв `active` - рж╕ржХрзНрж░рж┐ржпрж╝ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо
тАв `expired` - ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖
тАв `expiring` - рзн ржжрж┐ржирзЗ рж╢рзЗрж╖
тАв `trial` - ржлрзНрж░рж┐ ржЯрзНрж░рж╛ржпрж╝рж╛рж▓
тАв `new` - ржирждрзБржи ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо

**ЁЯТб ржЙржжрж╛рж╣рж░ржг:**
тАв `/add_premium 123456789 30`
тАв `/search_premium @username`
тАв `/filter_premium active`"""

    buttons = [
        [InlineKeyboardButton("ЁЯУК ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи", callback_data="premium_stats")],
        [InlineKeyboardButton("ЁЯСС ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рждрж╛рж▓рж┐ржХрж╛", callback_data="premium_list")],
        [InlineKeyboardButton("тЭМ ржмржирзНржз ржХрж░рзБржи", callback_data="close_data")]
    ]
    
    await message.reply(text, reply_markup=InlineKeyboardMarkup(buttons))

# Additional callback handlers for user actions
@Client.on_callback_query(filters.regex(r"extend_user_(\d+)"))
async def extend_user_callback(client, query: CallbackQuery):
    """Handle extend user callback"""
    if query.from_user.id not in ADMINS:
        await query.answer("тЭМ ржЖржкржирж╛рж░ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЕржирзБржорждрж┐ ржирзЗржЗ!", show_alert=True)
        return
    
    user_id = int(query.data.split("_")[2])
    
    text = f"""тЮХ **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржорзЗржпрж╝рж╛ржж ржмрж╛ржбрж╝рж╛ржи:**

ЁЯСд **ржЗржЙржЬрж╛рж░ ID:** `{user_id}`

ЁЯУЭ **ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:**
`/extend_premium {user_id} <days>`

**ржЙржжрж╛рж╣рж░ржг:**
`/extend_premium {user_id} 15`"""

    buttons = [
        [InlineKeyboardButton("ЁЯФЩ ржлрж┐рж░рзЗ ржпрж╛ржи", callback_data=f"refresh_info_{user_id}"),
         InlineKeyboardButton("тЭМ ржмржирзНржз", callback_data="close_data")]
    ]
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))

@Client.on_callback_query(filters.regex(r"remove_user_(\d+)"))
async def remove_user_callback(client, query: CallbackQuery):
    """Handle remove user callback"""
    if query.from_user.id not in ADMINS:
        await query.answer("тЭМ ржЖржкржирж╛рж░ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЕржирзБржорждрж┐ ржирзЗржЗ!", show_alert=True)
        return
    
    user_id = int(query.data.split("_")[2])
    
    text = f"""тЭМ **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ рж╕рж░рж╛ржи:**

ЁЯСд **ржЗржЙржЬрж╛рж░ ID:** `{user_id}`

тЪая╕П **рж╕рждрж░рзНржХрждрж╛:** ржПржЗ ржХрж╛ржЬржЯрж┐ ржкрзВрж░рзНржмрж╛ржмрж╕рзНржерж╛ржпрж╝ ржлрзЗрж░рж╛ржирзЛ ржпрж╛ржмрзЗ ржирж╛ред

ЁЯУЭ **ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи:**
`/remove_premium {user_id}`"""

    buttons = [
        [InlineKeyboardButton("тЬЕ ржирж┐рж╢рзНржЪрж┐ржд ржХрж░рзБржи", callback_data=f"confirm_remove_{user_id}")],
        [InlineKeyboardButton("ЁЯФЩ ржлрж┐рж░рзЗ ржпрж╛ржи", callback_data=f"refresh_info_{user_id}"),
         InlineKeyboardButton("тЭМ ржмржирзНржз", callback_data="close_data")]
    ]
    
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))

@Client.on_callback_query(filters.regex(r"confirm_remove_(\d+)"))
async def confirm_remove_callback(client, query: CallbackQuery):
    """Confirm and remove premium user"""
    if query.from_user.id not in ADMINS:
        await query.answer("тЭМ ржЖржкржирж╛рж░ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЕржирзБржорждрж┐ ржирзЗржЗ!", show_alert=True)
        return
    
    user_id = int(query.data.split("_")[2])
    
    try:
        # Check if user has premium
        if not await db.has_premium_access(user_id):
            await query.answer("тЭМ ржПржЗ ржЗржЙржЬрж╛рж░рзЗрж░ ржХрзЛржи ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржирзЗржЗред", show_alert=True)
            return
        
        # Remove premium access
        await db.remove_premium_user(user_id)
        
        # Get user info
        try:
            user_info = await client.get_users(user_id)
            name = user_info.first_name
        except:
            name = "Unknown User"
        
        text = f"""тЬЕ **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ рж╕рж░рж╛ржирзЛ рж╣ржпрж╝рзЗржЫрзЗ!**

ЁЯСд **ржЗржЙржЬрж╛рж░:** `{user_id}` - **{name}**

тЪая╕П **ржЗржЙржЬрж╛рж░ржЯрж┐ ржПржЦржи ржлрзНрж░рж┐ ржЗржЙржЬрж╛рж░ рж╣ржпрж╝рзЗ ржЧрзЗржЫрзЗред**"""
        
        buttons = [
            [InlineKeyboardButton("ЁЯУК ржкрж░рж┐рж╕ржВржЦрзНржпрж╛ржи", callback_data="premium_stats")],
            [InlineKeyboardButton("ЁЯСС ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рждрж╛рж▓рж┐ржХрж╛", callback_data="premium_list")],
            [InlineKeyboardButton("тЭМ ржмржирзНржз", callback_data="close_data")]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))
        
        # Notify the user
        try:
            await client.send_message(
                user_id,
                "тЪая╕П **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖**\n\n"
                "ржЖржкржирж╛рж░ ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ рж╕рж░рж┐ржпрж╝рзЗ ржжрзЗржУржпрж╝рж╛ рж╣ржпрж╝рзЗржЫрзЗред\n"
                "ржПржЦржи ржЖржкржирж┐ ржлрзНрж░рж┐ ржЗржЙржЬрж╛рж░ рж╣рж┐рж╕рзЗржмрзЗ рж╕рзАржорж┐ржд рж╕рзБржмрж┐ржзрж╛ ржкрж╛ржмрзЗржиред\n\n"
                "ржирждрзБржи ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржкрзНрж▓рзНржпрж╛ржирзЗрж░ ржЬржирзНржп /plan ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржиред"
            )
        except:
            pass
        
    except Exception as e:
        await query.answer(f"тЭМ ржПрж░рж░: {str(e)}", show_alert=True)

@Client.on_callback_query(filters.regex(r"refresh_info_(\d+)"))
async def refresh_info_callback(client, query: CallbackQuery):
    """Refresh user info"""
    if query.from_user.id not in ADMINS:
        await query.answer("тЭМ ржЖржкржирж╛рж░ ржПржЗ ржХржорж╛ржирзНржб ржмрзНржпржмрж╣рж╛рж░рзЗрж░ ржЕржирзБржорждрж┐ ржирзЗржЗ!", show_alert=True)
        return
    
    user_id = int(query.data.split("_")[2])
    
    try:
        # Get premium user details
        details = await db.get_premium_user_details(user_id)
        
        if not details:
            await query.answer("тЭМ ржПржЗ ржЗржЙржЬрж╛рж░рзЗрж░ ржХрзЛржи ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЕрзНржпрж╛ржХрзНрж╕рзЗрж╕ ржирзЗржЗред", show_alert=True)
            return
        
        # Get user info from Telegram
        try:
            user_info = await client.get_users(user_id)
            name = user_info.first_name
            username = f"@{user_info.username}" if user_info.username else "No Username"
        except:
            name = "Unknown User"
            username = "N/A"
        
        remaining = details['remaining_time']
        days_left = remaining.days
        hours_left = remaining.seconds // 3600
        
        text = f"""ЁЯСд **ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо ржЗржЙржЬрж╛рж░рзЗрж░ рждржерзНржп:**

**ЁЯУЛ ржмрзНржпржХрзНрждрж┐ржЧржд рждржерзНржп:**
тАв **ржирж╛ржо:** {name}
тАв **ржЗржЙржЬрж╛рж░ ID:** `{user_id}`
тАв **Username:** {username}

**ЁЯТО ржкрзНрж░рж┐ржорж┐ржпрж╝рж╛ржо рждржерзНржп:**
тАв **ржорзЗржпрж╝рж╛ржж рж╢рзЗрж╖:** `{details['expiry_time'].strftime('%d/%m/%Y %H:%M')}`
тАв **ржмрж╛ржХрж┐ рж╕ржоржпрж╝:** **{days_left} ржжрж┐ржи {hours_left} ржШржирзНржЯрж╛**
тАв **ржлрзНрж░рж┐ ржЯрзНрж░рж╛ржпрж╝рж╛рж▓:** {'тЬЕ рж╣рзНржпрж╛ржБ' if details['has_free_trial'] else 'тЭМ ржирж╛'}

**ЁЯУК ржмрзНржпржмрж╣рж╛рж░рзЗрж░ рждржерзНржп:**
тАв **ржЖржЬржХрзЗрж░ рж░рж┐ржХрзБржпрж╝рзЗрж╕рзНржЯ:** `{details['daily_requests']}`
тАв **ржорзЛржЯ рж░рж┐ржХрзБржпрж╝рзЗрж╕рзНржЯ:** `{details['total_requests']}`
тАв **ржжрзИржирж┐ржХ рж╕рзАржорж╛:** `{details['max_daily_requests']}`"""

        buttons = [
            [InlineKeyboardButton("тЮХ ржорзЗржпрж╝рж╛ржж ржмрж╛ржбрж╝рж╛ржи", callback_data=f"extend_user_{user_id}"),
             InlineKeyboardButton("тЭМ рж╕рж░рж╛ржи", callback_data=f"remove_user_{user_id}")],
            [InlineKeyboardButton("ЁЯФД рж░рж┐ржлрзНрж░рзЗрж╢", callback_data=f"refresh_info_{user_id}"),
             InlineKeyboardButton("тЭМ ржмржирзНржз", callback_data="close_data")]
        ]
        
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(buttons))
        
    except Exception as e:
        await query.answer(f"тЭМ ржПрж░рж░: {str(e)}", show_alert=True)

@Client.on_callback_query(filters.regex("close_data"))
async def close_callback(client, query: CallbackQuery):
    """Close the message"""
    await query.message.delete()